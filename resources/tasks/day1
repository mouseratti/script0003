1) Write a function that computes character frequency for a given text.
   The text to be analyzed is passed as argument, the result is returned from
   function, not displayed. Keep separate count for vowels and consonants.
   eg:
   {“vowels”:
   {“a”: 4, “e”: 2},
   “consonants”:
   {“b”: 12, “g”:1}
   }

2) Given two arrays of strings a1 and a2
return a sorted array r in lexicographical order of the strings
a1 which are substrings of strings of a2.

#Example 1:
    a1 = ["arp", "live", "strong"]
    a2 = ["lively", "alive", "harp", "sharp", "armstrong"]
    returns ["arp", "live", "strong"]

#Example 2:
a1 = ["tarp", "mice", "bull"]
a2 = ["lively", "alive", "harp", "sharp", "armstrong"]

returns []

Beware: return must be without duplicates.
Don't mutate the inputs.



3) Create parametrized decorator that caches results of function calling.
Same input should not recalculate result.
Result should be returned from cache.
Parameter "size" should set cache size


@Cached(3)
def func(i): return i+1

func(1)   #calculates result
2
func(1)   #returns result from cache
2

Write unittests for this decorator